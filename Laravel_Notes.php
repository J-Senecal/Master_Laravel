<?php

/*
Laravel App Structure
-app (logic of the application)
--http/Controllers
--Models
--Providers
-bootstrap(routes and middleware)
-config (defines basic laravel functions)
-database
-public
--.htaccess - apache server file to direct all traffic to index.php
--index.php
-resources
--JS
--CSS
--views (Blades)
---layouts (displays same info on every blade to reduce redundant coding)
-routes
-storage
-tests
-vendor

*/

//----------methods --------//
old() //keeps form data if submitted correctly so even if other inputs have errors you don't have to retype



//--------- command prompts -----------//

php artisan route:list - //will list all routes in app
php artisan tinker //can write SQL queries on command line and get database data directly in terminal

isset() - //function to determine whether a variable is set
endisset()- //closes the block around which statements the isset function is checking

@ - //error control operator. When an expression is prepended with the @ sign, error messages that might be generated by that expression will be ignored. If the track_errors feature is enabled, an error message generated by the expression and it will be saved in the variable $php_errormsg. This variable will be overwritten on each error.


collect() //converts arrays to Laravel collection objects so you can call methods and do operations on the array

//-------------------Blade Templates---------------------//

//Blades are stored in the resources/views folder and have .blade.php extension.  It is assumed within the view() so just the name of the file is required, no extensions

Route::get('/tasks', function () use ($tasks) { //use statement allows access to variables outside of anonymous functions 
    return view('index', [ //pass data ( variable) to view in key:value pairs. Key is the variable, value is the data that will be passed
        'tasks' => $tasks
    ]);
})->name('tasks.index');

//-----blade subviews----//

//these are reusable views for things that have the same style (ex. create and update form blades)


//Layouts

//Inherit code from one layout blade to be applied to all blades so you don't have to code the same information on every blade template. 

@extends('layouts.app') // folderName.bladeLayoutName

// inside the layout need to use
@yield('title') //name whatever you want that content to be, then inside the blade template that extends the layout, define the section using @section('title')




//----------------------------Models------------------------//

//model names are singular, migrations create a table name that is the plural of the model name\
create() // create new model instance
update() // update existing model instance

php artisan make:model modelNameHere -m //-m will also create a migration file


namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory; //need to add this in order to use Factory to seed Db

class Task extends Model
{
    use HasFactory; // add this use to have factories seed Db
}



//--------------------Migrations-----------------------------//

//Migrations are like version control, with up() forward or down() which rolls back changes
php artisan migrate //will add changes of your model to your database
php artisan migrate:rollback //this will rollback to the last migration
php artisan make:migration create_tableName_table //use this command to create a migration to add a new table to the Db. 
php artisan db:seed //adds to database
php artisan migrate:refresh --seed //erases all data in db and seeds with current data in migration


return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('tasks', function (Blueprint $table) { //first argument is table name, second is function to create object
            $table->id(); // these are columns in the table, add as many as you want
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tasks');
    }
};


//---------------Routes--------------//
//order of routes matter.  Routes with common paths might get caught in wrong route and fail. 

php artisan route:list //display all the route names defined in the app

Route::get('/tasks', function () use ($tasks) { //use statement allows access to variables outside of anonymous functions 
    return view('index', [ //pass data ( variable) to view in key:value pairs
        'tasks' => $tasks
    ]);
})->name('tasks.index');

Route::get('/tasks/{id}' ,function($id) {
    return view('show', [
        'task' => \App\Models\Task::findOrFail($id)]); //pass the model directly into the route.  
})->name('tasks.show');

findOrFail(); //if info is not found for specified route, it will abort and return a 404 error page
find(); //find the specified information for the route to return a view


//-- route model binding ---//

Route::get('/tasks/{id}' ,function($id) {
    return view('show', [
        'task' => \App\Models\Task::findOrFail($id)]); //pass the model directly into the route.  
})->name('tasks.show');

//becomes

Route::get('/tasks/{task}' ,function(Task $task) { // put model name and variable
    return view('show', [
        'task' => $task
    ]);
})->name('tasks.show');



//------------Requests------------//
//good for validations as long as same exact validations for multiple routes

php artisan make:request RequestNameHere // found in App\Http\Requests

//---------------------------Database------------------------//
/*
.env file has database config
config>database.php pulls info from .env file 

command
php artisan migrate

//-----Query Builder-----//

//create SQL queries directly in your code

//-------Docker------//

//move docker-compose.yml into root folder.  You can adjust port and password in this folder
//command prompt-   docker compose up
/*
url - localhost:8080 
system- MySQL
server - mysql
username- root
password - root ( or whatever is specified in docker-compose.yml file)
database - blank
*/


//-----factories-----//

php artisan make:factory factoryName --model=modelName
//provide a way to populate database tables with fake data for testing
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(), //fake() utilizes the PHP library Faker
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

//----seeders----//

php artisan db:seed //will add data to db
php artisan migrate:refresh --seed //will clear the migrations so db will only have the current data you are seeding

//load something into the database
class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create(); //factory(# of models you want to generate)

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}

@if (count($record) === 1)
    I have one record!
@elseif (count($records) > 1)
    I have multiple records!
@else
    I don't have any records!
@endif


Loops
@for ($i = 0; $i < 10; $i++)
    The current value is {{ $i }}
@endfor

@foreach ($users as $user)
    <p>This is user {{ $user->id }}</p>
@endforeach

Forelse loops through and also has an else statement if none are found
@forelse ($users as $user) 
    <li>{{ $user->name }}</li>
@empty
    <p>No users</p>
@endforelse


@while (true)
    <p>I'm looping forever.</p>
@endwhile
?>